import GeneralAPI from "./api/General";
import TestingAPI from "./api/Testing";
import ContactsBaseAPI from "./api/Contacts";
import ContactListsBaseAPI from "./api/ContactLists";
import TemplatesBaseAPI from "./api/Templates";
import { Mail, SendResponse, MailtrapClientConfig, BatchSendResponse, BatchSendRequest } from "../types/mailtrap";
import SuppressionsBaseAPI from "./api/Suppressions";
/**
 * Mailtrap client class. Initializes instance with available methods.
 */
export default class MailtrapClient {
    private axios;
    private testInboxId?;
    private accountId?;
    private bulk;
    private sandbox;
    /**
     * Initalizes axios instance with Mailtrap params.
     */
    constructor({ token, testInboxId, accountId, bulk, sandbox, }: MailtrapClientConfig);
    /**
     * Validates that account ID is present, throws MailtrapError if missing.
     */
    private validateAccountIdPresence;
    /**
     * Validates that test inbox ID is present, throws MailtrapError if missing.
     */
    private validateTestInboxIdPresence;
    /**
     * Getter for Testing API. Warns if some of the required keys are missing.
     */
    get testing(): TestingAPI;
    /**
     * Getter for General API.
     */
    get general(): GeneralAPI;
    /**
     * Getter for Contacts API.
     */
    get contacts(): ContactsBaseAPI;
    /**
     * Getter for Contact Lists API.
     */
    get contactLists(): ContactListsBaseAPI;
    /**
     * Getter for Templates API.
     */
    get templates(): TemplatesBaseAPI;
    /**
     * Getter for Suppressions API.
     */
    get suppressions(): SuppressionsBaseAPI;
    /**
     * Returns configured host. Checks if `bulk` and `sandbox` modes are activated simultaneously,
     *   then reject with Mailtrap Error.
     * Otherwise returns appropriate host url.
     */
    private determineHost;
    /**
     * Sends mail with given `mail` params. If there is error, rejects with `MailtrapError`.
     */
    send(mail: Mail): Promise<SendResponse>;
    /**
     * Sends a batch of emails with the given array of mail objects.
     * If there is an error, rejects with MailtrapError.
     */
    batchSend(request: BatchSendRequest): Promise<BatchSendResponse>;
}
