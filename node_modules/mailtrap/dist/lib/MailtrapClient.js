"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const axios_1 = __importDefault(require("axios"));
const mail_buffer_encoder_1 = __importDefault(require("./mail-buffer-encoder"));
const axios_logger_1 = __importDefault(require("./axios-logger"));
const MailtrapError_1 = __importDefault(require("./MailtrapError"));
const General_1 = __importDefault(require("./api/General"));
const Testing_1 = __importDefault(require("./api/Testing"));
const Contacts_1 = __importDefault(require("./api/Contacts"));
const ContactLists_1 = __importDefault(require("./api/ContactLists"));
const Templates_1 = __importDefault(require("./api/Templates"));
const config_1 = __importDefault(require("../config"));
const Suppressions_1 = __importDefault(require("./api/Suppressions"));
const { CLIENT_SETTINGS, ERRORS } = config_1.default;
const { SENDING_ENDPOINT, MAX_REDIRECTS, USER_AGENT, TIMEOUT, TESTING_ENDPOINT, BULK_ENDPOINT, } = CLIENT_SETTINGS;
const { ACCOUNT_ID_MISSING, BULK_SANDBOX_INCOMPATIBLE, TEST_INBOX_ID_MISSING } = ERRORS;
/**
 * Mailtrap client class. Initializes instance with available methods.
 */
class MailtrapClient {
    /**
     * Initalizes axios instance with Mailtrap params.
     */
    constructor({ token, testInboxId, accountId, bulk = false, sandbox = false, }) {
        this.axios = axios_1.default.create({
            httpAgent: new http.Agent({ keepAlive: true }),
            httpsAgent: new https.Agent({ keepAlive: true }),
            headers: {
                Authorization: `Bearer ${token}`,
                Connection: "keep-alive",
                "User-Agent": USER_AGENT,
            },
            maxRedirects: MAX_REDIRECTS,
            timeout: TIMEOUT,
        });
        /** Init Axios interceptors for handling response.data, errors. */
        this.axios.interceptors.response.use((response) => response.data, axios_logger_1.default);
        this.testInboxId = testInboxId;
        this.accountId = accountId;
        this.bulk = bulk;
        this.sandbox = sandbox;
    }
    /**
     * Validates that account ID is present, throws MailtrapError if missing.
     */
    validateAccountIdPresence() {
        if (!this.accountId) {
            throw new MailtrapError_1.default(ACCOUNT_ID_MISSING);
        }
    }
    /**
     * Validates that test inbox ID is present, throws MailtrapError if missing.
     */
    validateTestInboxIdPresence() {
        if (this.sandbox && !this.testInboxId) {
            throw new MailtrapError_1.default(TEST_INBOX_ID_MISSING);
        }
    }
    /**
     * Getter for Testing API. Warns if some of the required keys are missing.
     */
    get testing() {
        this.validateAccountIdPresence();
        return new Testing_1.default(this.axios, this.accountId);
    }
    /**
     * Getter for General API.
     */
    get general() {
        this.validateAccountIdPresence();
        return new General_1.default(this.axios, this.accountId);
    }
    /**
     * Getter for Contacts API.
     */
    get contacts() {
        this.validateAccountIdPresence();
        return new Contacts_1.default(this.axios, this.accountId);
    }
    /**
     * Getter for Contact Lists API.
     */
    get contactLists() {
        this.validateAccountIdPresence();
        return new ContactLists_1.default(this.axios, this.accountId);
    }
    /**
     * Getter for Templates API.
     */
    get templates() {
        this.validateAccountIdPresence();
        return new Templates_1.default(this.axios, this.accountId);
    }
    /**
     * Getter for Suppressions API.
     */
    get suppressions() {
        this.validateAccountIdPresence();
        return new Suppressions_1.default(this.axios, this.accountId);
    }
    /**
     * Returns configured host. Checks if `bulk` and `sandbox` modes are activated simultaneously,
     *   then reject with Mailtrap Error.
     * Otherwise returns appropriate host url.
     */
    determineHost() {
        let host;
        if (this.bulk && this.sandbox) {
            throw new MailtrapError_1.default(BULK_SANDBOX_INCOMPATIBLE);
        }
        else if (this.sandbox) {
            host = TESTING_ENDPOINT;
        }
        else if (this.bulk) {
            host = BULK_ENDPOINT;
        }
        else {
            host = SENDING_ENDPOINT;
        }
        return host;
    }
    /**
     * Sends mail with given `mail` params. If there is error, rejects with `MailtrapError`.
     */
    async send(mail) {
        const host = this.determineHost();
        this.validateTestInboxIdPresence();
        const url = `${host}/api/send${this.sandbox && this.testInboxId ? `/${this.testInboxId}` : ""}`;
        const preparedMail = (0, mail_buffer_encoder_1.default)(mail);
        return this.axios.post(url, preparedMail);
    }
    /**
     * Sends a batch of emails with the given array of mail objects.
     * If there is an error, rejects with MailtrapError.
     */
    async batchSend(request) {
        const { requests, base } = request;
        const host = this.determineHost();
        this.validateTestInboxIdPresence();
        const sandbox = this.sandbox && this.testInboxId ? `/${this.testInboxId}` : "";
        const url = `${host}/api/batch${sandbox}`;
        const preparedBase = base ? (0, mail_buffer_encoder_1.default)(base) : undefined;
        const preparedRequests = requests.map((singleRequest) => (0, mail_buffer_encoder_1.default)(singleRequest));
        return this.axios.post(url, {
            base: preparedBase,
            requests: preparedRequests,
        });
    }
}
exports.default = MailtrapClient;
